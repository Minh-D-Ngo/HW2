Collaboration: Group Isaac Tomeho
The BSP (Binary Space Partitioning) Program represents a sophisticated approach to image manipulation, leveraging concepts like rendering and recursion to precisely delineate specific regions or shapes within an image. 
Initiating the process begins with a blank canvas, typically a grid or graph. Upon this canvas, we introduce an initial dividing line, let it be named Line1. This renders two sections of the initial blank canvas(Head Node), let the two new sections be A and B. These rendered images serve as two left and right branch nodes of the Head node. The line has a front and a back side (one side is A and the other is B). Let A be the back section and B be the front section. We again choose one of the branch nodes to draw another line, this is decided by the area we want to work on or where the desired final section is located. If it is in Section A, line 2 is drawn, and similarly to the head node A is divided into two sections. We again put the section to the right or left of A according to the front and back allocation of the line. We recursively use this function until we get to the desired shape/section of the blank canvas.

The method initially checks for base cases (an empty list or an invalid index) and returns null if any are met. Following this, it generates a new BSPNode at the specified index, dividing the remaining lines into two lists, namely leftLines and rightLines, depending on their relationship with the current line. Subsequently, it recursively invokes the BSP function with these new lists, starting at index 0, and assigns the results to the left and right child nodes of the present node. To determine line intersection, the code employs an intersects method, which assesses whether the endpoints of one line fall on opposite sides of another using the Direction method, which, in turn, computes the cross-product of vectors and assesses the sign of the outcome. Lastly, the code provides methods for printing the BSP tree and performing in-order traversal, ultimately offering functionality for constructing a binary space partitioning tree from a given set of line segments, as well as facilitating line intersection checks, tree printing, and traversal.
